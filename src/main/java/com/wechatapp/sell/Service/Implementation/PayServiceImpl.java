package com.wechatapp.sell.Service.Implementation;

import com.lly835.bestpay.enums.BestPayTypeEnum;
import com.lly835.bestpay.model.PayRequest;
import com.lly835.bestpay.model.PayResponse;
import com.lly835.bestpay.model.RefundRequest;
import com.lly835.bestpay.model.RefundResponse;
import com.lly835.bestpay.service.impl.BestPayServiceImpl;
import com.wechatapp.sell.DTO.OrderDTO;
import com.wechatapp.sell.Enums.ResultEnum;
import com.wechatapp.sell.Exception.SellException;
import com.wechatapp.sell.Service.OrderService;
import com.wechatapp.sell.Service.PayService;
import com.wechatapp.sell.Utils.JsonUtil;
import com.wechatapp.sell.Utils.MathUtil;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;

@Service
@Data
@Slf4j
public class PayServiceImpl implements PayService {

    private final static String ORDER_NAME = "WeChat Order";

    @Autowired
    private BestPayServiceImpl bestPayService;  // this is a bean

    @Autowired
    private OrderService orderService;

    /**
     * 调度统一下单API
     * 返回预付单信息（prepay_id in "packAge" field of the response.）
     * @param orderDTO
     */
    @Override
    public PayResponse create(OrderDTO orderDTO) {
        PayRequest payRequest = new PayRequest();
        payRequest.setOpenid(orderDTO.getBuyerOpenid() );
        payRequest.setOrderAmount(orderDTO.getOrderAmount().doubleValue());
        payRequest.setOrderId(orderDTO.getOrderId());
        payRequest.setOrderName(ORDER_NAME);
        payRequest.setPayTypeEnum(BestPayTypeEnum.WXPAY_H5);
        log.info("【WeChat Payment】 request a payment, request = {}", JsonUtil.toJson(payRequest));

        PayResponse payResponse = bestPayService.pay(payRequest);
        log.info("【WeChat Payment】 request a payment, payResponse = {}", JsonUtil.toJson(payResponse));
        return payResponse;
    }

    /**
     * 异步通知，拿到prepay_id
     * */
    @Override
    public PayResponse notify(String notifyData) {
        // 1. Validate signature -> whether the parameter is generated by wechat payment
        // 2. Validate payment status
        // 3. Validate whether the amount equals order amount
        // 4. Validate payer (if the buyer == payer)

        // 1 & 2 done by bestPayService
        PayResponse payResponse = bestPayService.asyncNotify(notifyData);
        log.info("【WeChat Payment】异步通知，payResponse = {}", JsonUtil.toJson(payResponse));

        // Modify order payment status
        //   Find an order
        OrderDTO orderDTO = orderService.findOne(payResponse.getOrderId());
        //   Determine if the order exists
        if(orderDTO == null){
            log.error("【WeChat Payment】异步通知, order doesn't exist, orderId = {}", payResponse.getOrderId());
            throw new SellException(ResultEnum.ORDER_NOT_EXIST);
        }
        //  Validate whether the order amount matches
        if(! MathUtil.equals(payResponse.getOrderAmount(), orderDTO.getOrderAmount().doubleValue())){
            log.error("【WeChat Payment】异步通知, order amount doesn't match, orderId={}, wechatAmount={}, databaseAmount={}",
                    payResponse.getOrderId(), payResponse.getOrderAmount(), orderDTO.getOrderAmount());
            throw new SellException(ResultEnum.WXPAY_NOTIFY_MONEY_VERIFY_ERROR);
        }


        orderService.paid(orderDTO);

        return payResponse;
    }

    @Override
    public RefundResponse refund(OrderDTO orderDTO) {
        RefundRequest refundRequest = new RefundRequest();
        refundRequest.setOrderAmount(orderDTO.getOrderAmount().doubleValue());
        refundRequest.setOrderId(orderDTO.getOrderId());
        refundRequest.setPayTypeEnum(BestPayTypeEnum.WXPAY_H5);
        log.info("[Wechat refund] request={}", JsonUtil.toJson(refundRequest));

        RefundResponse refundResponse = bestPayService.refund(refundRequest);
        log.info("[Wechat refund] response={}", JsonUtil.toJson(refundResponse));

        return refundResponse;
    }
}
